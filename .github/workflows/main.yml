name: Run Setup Script

on:
  push:
    branches:
      - main  # Trigger on pushes to the main branch

jobs:
  bitcoin-setup:
    runs-on: ubuntu-latest  # Use the latest Ubuntu environment

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4  # Check out the repository code
          
      - name: Setup, Get Block & Verify Submissions
        run: |
          # Setup Bitcoin Core
          wget https://bitcoincore.org/bin/bitcoin-core-28.0/bitcoin-28.0-x86_64-linux-gnu.tar.gz
          tar -xzvf bitcoin-28.0-x86_64-linux-gnu.tar.gz
          sudo ln -s $PWD/bitcoin-28.0/bin/* /usr/local/bin/

          mkdir -p ~/.bitcoin
          echo "signet=1" >> ~/.bitcoin/bitcoin.conf
          echo "rpcconnect=165.22.121.70" >> ~/.bitcoin/bitcoin.conf
          echo "rpcuser=btrustbuildersrpc" >> ~/.bitcoin/bitcoin.conf
          echo "rpcpassword=btrustbuilderspass" >> ~/.bitcoin/bitcoin.conf

          # Verify block is accessible
          echo "Fetching block chain info..."
          bitcoin-cli -signet getblockchaininfo
      
          # Run and verify 01.sh
          chmod +x submission/01.sh
          HASH=$(submission/01.sh)
          EXPECTED=000000b024f11595795f0be5974229f786df389c8b92e92b61890e9e3c6b8d8a
          if [[ "$HASH" == "$EXPECTED" ]]; then
            echo "✅ Success: Verify Hash Block passed!"
          else
            echo "❌ Error: Verify Hash Block failed!"
            exit 1
          fi
      
          # 02.sh - Verify Input Count
          chmod +x submission/02.sh
          COUNT=$(submission/02.sh)
          if [[ "$COUNT" == "442" ]]; then
            echo "✅ Success: Input Count verification passed!"
          else
            echo "❌ Error: Input Count verification failed!"
            exit 1
          fi
      
          # 03.sh - Verify Transaction
          chmod +x submission/03.sh
          TX=$(submission/03.sh)
          EXPECTED=0e302b600d32b86c3362647f422e5605165a1e5c89c760d0d972e102f390c84e
          if [[ "$TX" == "$EXPECTED" ]]; then
            echo "✅ Success: Transaction verification passed!"
          else
            echo "❌ Error: Transaction verification failed!"
            exit 1
          fi
      
          # 04.sh - Verify Public Key Signer
          chmod +x submission/04.sh
          PUBKEY=$(submission/04.sh)
          EXPECTED_OUTPUT=02c6c9306ade30f9711c9503cdaa94094efc025acb9be7845acc49e1cb475952c6
          if [[ "$PUBKEY" == "$EXPECTED_OUTPUT" ]]; then
            echo "✅ Success: Public Key Signer verification passed!"
          else
            echo "❌ Error: Public Key Signer verification failed!"
            exit 1
          fi
      
          # 05.sh - Verify TX Fee
          chmod +x submission/05.sh
          FEE=$(submission/05.sh)
          if [[ "$FEE" == "696" ]]; then
            echo "✅ Success: TX Fee (05.sh) verification passed!"
          else
            echo "❌ Error: TX Fee (05.sh) verification failed!"
            exit 1
          fi
      
          # 06.sh - Verify TX ID opt-in RBF
          chmod +x submission/06.sh
          TXID=$(submission/06.sh)
          if [[ "$TXID" == "d78ef223c1adb9e5c9051f0ab1f03708838466630805aaf3eb2b123e374d12ab" ]]; then
            echo "✅ Success: TX ID opt-in RBF verification passed!"
          else
            echo "❌ Error: TX ID opt-in RBF verification failed!"
            exit 1
          fi
      
          # 07.sh - Verify Coinbase TX
          chmod +x submission/07.sh
          COINBASE=$(submission/07.sh | tr -d '\n' | xargs)
          EXPECTED_OUTPUT=7ab200e41b53d974f757535c01a715aae6b1322a30753c1d2b0ea201500bc060
          if [[ "$COINBASE" == "$EXPECTED_OUTPUT" ]]; then
            echo "✅ Success: Coinbase TX verification passed!"
          else
            echo "❌ Error: Coinbase TX verification failed!"
            exit 1
          fi
      
          # 08.sh - Verify TX Block Height
          chmod +x submission/08.sh
          HEIGHT=$(submission/08.sh)
          if [[ "$HEIGHT" == "243859" ]]; then
            echo "✅ Success: TX Block Height verification passed!"
          else
            echo "❌ Error: TX Block Height verification failed!"
            exit 1
          fi


          ## FINAL TASK

          # Read wallet name and verify GitHub profile
          if [ ! -s submission/wallet.txt ]; then
              echo "❌ Error: wallet.txt is empty or missing."
              exit 1
          fi

          WALLET=$(cat submission/wallet.txt | tr -d '\n')
          echo "wallet=$WALLET" >> $GITHUB_OUTPUT
      
          STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" https://github.com/$WALLET)
          if [[ "$STATUS_CODE" == "200" ]]; then
            echo "✅ GitHub profile exists: https://github.com/$WALLET"
          else
            echo "❌ GitHub profile not found for wallet name '$WALLET'"
            exit 1
          fi

          # Verify native SegWit address exists
          if [ ! -s submission/address.txt ]; then
              echo "❌ Error: address.txt is empty or missing."
              exit 1
          fi

          ADDRESS=$(cat submission/address.txt)
          if [[ $ADDRESS == "tb1"* ]]; then
            echo "✅ Native SegWit address is valid: $ADDRESS"
          else
            echo "❌ Invalid SegWit address: $ADDRESS"
            exit 1
          fi

          # Verify transaction-1.txt (funding tx)
          if [[ ! -s submission/transaction-1.txt ]]; then
              echo "❌ Error: transaction-1.txt is empty or missing."
              exit 1
          fi
          TX1=$(cat submission/transaction-1.txt)
          EX=$(bitcoin-cli -signet getrawtransaction "$TX1" true | jq --arg addr "$ADDRESS" '.vout[] | select(.scriptPubKey.address == $addr)')
          if [[ -n "$EX" ]]; then
              echo "✅ Funding transaction exists: $TX1"
          else
              echo "❌ Funding transaction not found: $TX1"
              exit 1
          fi

          # Verify block-1.txt
          if [[ ! -s submission/block-1.txt ]]; then
              echo "❌ Error: block-1.txt is empty or missing."
              exit 1
          fi
          BLOCK1=$(cat submission/block-1.txt | tr -d '\n')
          TXS1=$(bitcoin-cli -signet getblock $BLOCK1 | jq -r '.tx[]')
          if echo "$TXS1" | grep -xq "$TX1"; then
              echo "✅ transaction-1 is included in block-1."
          else
              echo "❌ transaction-1 not found in block-1."
              exit 1
          fi

          # Verify coinbase-1.txt
          if [[ ! -s submission/coinbase-1.txt ]]; then
              echo "❌ Error: coinbase-1.txt is empty or missing."
              exit 1
          fi
          COINBASE1=$(cat submission/coinbase-1.txt)
          EXP=$(bitcoin-cli -signet getblock $BLOCK1 | jq -r '.tx[0]')
          if echo "$EXP" | grep -xq "$COINBASE1"; then
            echo "✅ Coinbase-1 matches the first transaction in block-1"
          else
            echo "❌ Coinbase-1 does not match"
            exit 1
          fi

          # Verify transaction-2.txt (spend tx)
          if [[ ! -s submission/transaction-2.txt ]]; then
              echo "❌ Error: transaction-2.txt is empty or missing."
              exit 1
          fi
          TX2=$(cat submission/transaction-2.txt)
          TX2_DETAILS=$(bitcoin-cli -signet getrawtransaction $TX2 true)
          AMOUNT_SENT=$(echo $TX2_DETAILS | jq -r ".vout[] | select(.scriptPubKey.address==\"tb1qddpcyus3u603n63lk7m5epjllgexc24vj5ltp7\") | .value")
          if [[ "$AMOUNT_SENT" == "0.00010000" ]]; then
              echo "✅ Sent exactly 10,000 sats."
          else
              echo "❌ Did not send exactly 10,000 sats."
              exit 1
          fi

          # Verify fee
          TX2_META=$(bitcoin-cli -signet -rpcwallet=$WALLET gettransaction $TX2)
          FEE=$(echo $TX2_META | jq -r '.fee' | awk '{print int(-100000000 * $1)}')
          if [[ "$FEE" -eq 700 ]]; then
              echo "✅ Fee is exactly 700 sats."
          else
              echo "❌ Incorrect fee: $FEE sats."
              exit 1
          fi

          # Verify Transaction fee can be upgraded
          HEX=$(echo $TX2_META | jq -r '.hex')
          SE=$(bitcoin-cli -signet decoderawtransaction $HEX | jq -r '.vin[0].sequence')
          if [[ -n "$SE" && "$SE" =~ ^[0-9]+$ && "$SE" -lt 4294967294 ]]; then
              echo "✅ Transaction is BIP125 replaceable."
          else
              echo "❌ Transaction is not BIP125 replaceable."
              exit 1
          fi

          # Verify block-2.txt
          if [[ ! -s submission/block-2.txt ]]; then
              echo "❌ Error: block-2.txt is empty or missing."
              exit 1
          fi
          BLOCK2=$(cat submission/block-2.txt | tr -d '\n')
          TXS2=$(bitcoin-cli -signet getblock $BLOCK2 | jq -r '.tx[]')
          if echo "$TXS2" | grep -xq "$TX2"; then
              echo "✅ transaction-2 is included in block-2."
          else
              echo "❌ transaction-2 not found in block-2."
              exit 1
          fi

          # Verify coinbase-2.txt
          if [[ ! -s submission/coinbase-2.txt ]]; then
              echo "❌ Error: coinbase-2.txt is empty or missing."
              exit 1
          fi
          COINBASE2=$(cat submission/coinbase-2.txt)
          EXP2=$(bitcoin-cli -signet getblock $BLOCK2 | jq -r '.tx[0]')
          if echo "$EXP2" | grep -xq "$COINBASE2"; then
            echo "✅ Coinbase-2 matches the first transaction in block-2"
          else
            echo "❌ Coinbase-2 does not match"
            exit 1
          fi


          # Verify multisig address
          if [[ ! -s submission/multisig-address.txt ]]; then
              echo "❌ Error: multisig-address.txt is empty or missing."
              exit 1
          fi
          ADDRESS=$(cat submission/multisig-address.txt)
          if [[ $ADDRESS == "2"* ]]; then
            echo "✅ Multisig address look valid."
          else
            echo "❌ Invalid multisig address"
            exit 1
          fi

          # Verify multisig redeem script
          if [[ ! -s submission/multisig-redeem.txt ]]; then
              echo "❌ Error: multisig-redeem.txt is empty or missing."
              exit 1
          fi
          REDEEM=$(cat submission/multisig-redeem.txt)
          if [[ $REDEEM =~ ^[0-9a-fA-F]+$ ]]; then
            echo "✅ Multisig redeem script look valid."
          else
            echo "❌ Invalid multisig redeem script"
            exit 1
          fi

          # Verify multisig transaction
          if [[ ! -s submission/multisig-transaction.txt ]]; then
              echo "❌ Error: multisig-transaction.txt is empty or missing."
              exit 1
          fi
          MU_TXID=$(cat submission/multisig-transaction.txt)
          R=$(bitcoin-cli -signet getrawtransaction "$MU_TXID" true | jq --arg addr "$ADDRESS" '.vout[] | select(.scriptPubKey.address == $addr)')
          if [[ -n "$R" ]]; then
              echo "✅ Multisig Funding transaction exists: $MU_TXID"
          else
              echo "❌ Multisig Funding transaction not found: $MU_TXID"
              exit 1
          fi

          # Verify multisig-block.txt
          if [[ ! -s submission/multisig-block.txt ]]; then
              echo "❌ Error: bmultisig-block.txt is empty or missing."
              exit 1
          fi
          MU_BLOCK=$(cat submission/multisig-block.txt | tr -d '\n')
          MU_TXS=$(bitcoin-cli -signet getblock $MU_BLOCK | jq -r '.tx[]')
          if echo "$MU_TXS" | grep -xq "$MU_TXID"; then
              echo "✅ multisig transaction is included in multisig block."
          else
              echo "❌ multisig transaction not found in multisig block."
              exit 1
          fi

          # Verify multisig-coinbase.txt
          if [[ ! -s submission/multisig-coinbase.txt ]]; then
              echo "❌ Error: multisig-coinbase.txt is empty or missing."
              exit 1
          fi
          MU_COINBASE=$(cat submission/multisig-coinbase.txt)
          FIRST=$(bitcoin-cli -signet getblock $MU_BLOCK | jq -r '.tx[0]')
          if echo "$FIRST" | grep -xq "$MU_COINBASE"; then
            echo "✅ multisig-coinbase matches the first transaction."
          else
            echo "❌ multisig-coinbase does not match."
            exit 1
          fi
